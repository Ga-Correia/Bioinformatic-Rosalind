# -*- coding: utf-8 -*-
"""atv18_DeBruijnGraphipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J1TrEQCz0ySbdsAbVF4nk47FZ-8A8AGb
"""

class Graph:
    def __init__(self):
        self.graph = {}

    def add_node(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def add_edge(self, vertex, kmer1, kmer2):
      if kmer1 not in self.graph[vertex] and kmer2 not in self.graph[vertex]:
          self.graph[vertex].append(kmer1)
          self.graph[vertex].append(kmer2)

    def adjacency_list(self):
      sortedDict = dict( sorted(self.graph.items(), key=lambda x: x[0].lower()) )
      for vertice in sortedDict:
            print(f"({sortedDict[vertice][0]}, {sortedDict[vertice][1]})")

graph = Graph()
fl = open("rosalind_dbrutest.txt", "r")
kmers = []
hash_reverse = {"A": "T", "T": "A", "C": "G", "G": "C"}
rev_kmer = ""

for lin in fl:
  kmer = lin.strip()
  rev = kmer[::-1]
  for i in range(len(rev)):
    rev_kmer += hash_reverse[rev[i]]
  graph.add_node(kmer)
  graph.add_node(rev_kmer)
  graph.add_edge(kmer, kmer[:len(kmer)-1], kmer[1:])
  graph.add_edge(rev_kmer, rev_kmer[:len(rev_kmer)-1], rev_kmer[1:])
  rev_kmer = ""

fl.close()
graph.adjacency_list()